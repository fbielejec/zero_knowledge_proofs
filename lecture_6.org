* NOTES
- pairings
- pairing groups
- order of the pairing groups
- pairings in Solidity (precompile)

#+BEGIN_SRC sage  :session . :exports both
import py_ecc.bn128 as bn128

p=21888242871839275222246405745257275088696311157297823662689037894645226208583
Fp=GF(p)
E = EllipticCurve(Fp, [0,3])
G1 = E(1,2)

n=G1.order()
# embedding degree
k=2
t=E.trace_of_frobenius()

Fp2 = GF((p,k), name='i', modulus=x^k + 1)

a=0
TwistB=3*Fp2([9,1])^(-1) # 3/(i+9)

E2 = EllipticCurve(Fp2, [a,TwistB])
#E2 = E.base_extend(Fp2)

# [a,b] -> a + i*b
x_G2 = Fp2([
  10857046999023057135944570762232829481370756359578518086990519993285655852781,
  11559732032986387107991004021392285783925812861821192530917403151452391805634
])

y_G2 = Fp2([
  8495653923123431417604973247489272438418190587263600148770280649306958101930,
  4082367875863433681332203403145435568316851327593401208105741076214120093531
])

G2 = E2(x_G2, y_G2)

# G2 is of the same order as G1
assert(n*G2 == E2(0))

# Show the generators
#G1, G2

# computes e(Q \in G2, P \in G1)
def pairing(P,Q):
 return bn128.pairing( (bn128.FQ2([int(Q[0][0]), int(Q[0][1])]),
                        bn128.FQ2([int(Q[1][0]), int(Q[1][1])])),
                       (bn128.FQ(int(P[0])), bn128.FQ(int(P[1]))) )

A = 3 * G1
B = 4 * G2
C = 1 * G1
D = 12 * G2

pairing(A,B) == pairing(C,D)
#+END_SRC

#+RESULTS:
: (2046729899889901964437012741252570163462327955511008570480857952505584629957*i + 4351401811647638138392695977895401859084096897123577305203754529537814663109 : 14316075702276096164483565793667862351398527813470041574939773541551376891710*i + 322506915963699862059245473966830598387691259163658767351233132602858049743 : 1)
: 2046729899889901964437012741252570163462327955511008570480857952505584629957*i + 4351401811647638138392695977895401859084096897123577305203754529537814663109
: 14316075702276096164483565793667862351398527813470041574939773541551376891710*i + 322506915963699862059245473966830598387691259163658767351233132602858049743
: True
