* NOTES
- pairings
- pairing groups
- order of the pairing groups
- pairings in Solidity (precompile)

#+BEGIN_SRC sage  :session . :exports both
import py_ecc.bn128 as bn128

p=21888242871839275222246405745257275088696311157297823662689037894645226208583
Fp=GF(p)
E = EllipticCurve(Fp, [0,3])
G1 = E(1,2)

n=G1.order()
# embedding degree
k=2
t=E.trace_of_frobenius()

Fp2 = GF((p,k), name='i', modulus=x^k + 1)

a=0
TwistB=3*Fp2([9,1])^(-1) # 3/(i+9)

E2 = EllipticCurve(Fp2, [a,TwistB])
#E2 = E.base_extend(Fp2)

# [a,b] -> a + i*b
x_G2 = Fp2([
  10857046999023057135944570762232829481370756359578518086990519993285655852781,
  11559732032986387107991004021392285783925812861821192530917403151452391805634
])

y_G2 = Fp2([
  8495653923123431417604973247489272438418190587263600148770280649306958101930,
  4082367875863433681332203403145435568316851327593401208105741076214120093531
])

G2 = E2(x_G2, y_G2)

# G2 is of the same order as G1
assert(n*G2 == E2(0))

# Show the generators
#G1, G2


bn128.G2 
#(G2[0][0], G2[0][1]), (G2[1][0], G2[1][1])


#G2[0][0]
#G2[0][1]
#G2[1][0]
#G2[1][1]

#bn128.multiply((G1[0], G1[1]),3) 
#bn128.multiply(bn128.G1,3)

# https://github.com/ethereum/py_ecc/blob/main/py_ecc/bn128/bn128_curve.py#L38

G2_sage = ( bn128.FQ2([int(G2[0][0]), int(G2[0][1])]),
            bn128.FQ2([int(G2[1][0]), int(G2[1][1])]) )

bn128.multiply(G2_sage, 8)
#+END_SRC

#+RESULTS:
: ((10857046999023057135944570762232829481370756359578518086990519993285655852781, 11559732032986387107991004021392285783925812861821192530917403151452391805634),
:  (8495653923123431417604973247489272438418190587263600148770280649306958101930, 4082367875863433681332203403145435568316851327593401208105741076214120093531))
: ((11166086885672626473267565287145132336823242144708474818695443831501089511977, 1513450333913810775282357068930057790874607011341873340507105465411024430745),
:  (10576778712883087908382530888778326306865681986179249638025895353796469496812, 20245151454212206884108313452940569906396451322269011731680309881579291004202))
