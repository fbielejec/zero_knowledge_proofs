* IN-PROGRESS R1CS
- https://www.notion.so/Homework-7-R1CS-2fd956fcccf742398435ab9b2da8f934
** DONE Problem 1
Create a graph with 2 nodes and 1 edge and write constraints for a 3-coloring.
Turn the 3-coloring to a rank 1 constraint system. If you forgot how to do this, consult the chapter on arithmetic circuits.

#+BEGIN_SRC dot :file problem_1_graph.png :exports results
graph G {
    x1 -- x2;
}
#+END_SRC

#+RESULTS:
[[file:problem_1_graph.png]]

We can adapt the [[file:homework_7.org][2 coloring]] and [[https://rareskills.io/post/arithmetic-circuit#:~:text=Example%201%3A%20Modeling%203%2Dcoloring%20with%20an%20Arithmetic%20Circuit][3 coloring]] to our problem.
Labeling the colors as before we have
- BLUE = 1
- RED = 2
- GREEN = 3

We constrain each node to have exactly one color, this gives us these constraints:

- Node $x_1$ is either BLUE, RED or GREEN:
  $(x_{1}-1) \cdot (x_{1}-2) \cdot (x_{1}-6) \equiv 0$

- Node $x_2$ is either BLUE, RED or GREEN:
  $(x_{2}-1) \cdot (x_{2}-2) \cdot (x_{2}-6) \equiv 0$

No two nodes can share the same color. Similar to before this can be modeled by contraining the product of two neighbouring nodes to take on a certain acceptable values:

| x1 | x2 | product |
|----+----+---------|
|  1 |  1 | 1       |
|  1 |  2 | *2*     |
|  1 |  3 | *3*     |
|  2 |  1 | *2*     |
|  2 |  2 | 4       |
|  2 |  3 | *6*     |
|  3 |  1 | *3*     |
|  3 |  2 | *6*     |
|  3 |  3 | 9       |

From this we have:

$(x_1 \cdot x_2 -2) \cdot (x_1 \cdot x_2 -3) \cdot (x_1 \cdot x_2 -6)$

We can now turn these into an R1CS.
For the first two color constraints we have:

#+BEGIN_SRC maxima :exports both :results output replace
print(expand ((x1-1)*(x1-2)*(x1-6)));
print(expand ((x2-1)*(x2-2)*(x2-6)));
#+END_SRC

#+RESULTS:
:   3       2
: x1  - 9 x1  + 20 x1 - 12
:   3       2
: x2  - 9 x2  + 20 x2 - 12

And for the neigbouring constraint we have:

#+BEGIN_SRC maxima :exports both :results output replace
print(expand ((x1*x2-2)*(x1*x2-3)*(x1*x2-6)));
#+END_SRC

#+RESULTS:
:   3   3        2   2
: x1  x2  - 11 x1  x2  + 36 x1 x2 - 36

We can write these as:

$\begin{cases}
x_{1} \cdot x_{1}=v_{1} \\
x_{2} \cdot x_{2}=v_{2} \\
x_{1} \cdot x_{2}=v_{3} \\
v_{3} \cdot v_{3}=v_{4} \\
x_{1} \cdot v_{1} = 9v_{1} -20x_{1} +12 \\
x_{2} \cdot v_{2} = 9v_{2} -20x_{2} +12 \\
v_{3} \cdot v_{4} = 11v_{4} -36v_{3} + 36
\end{cases}$

** DONE Problem 2
Write python code that takes an R1CS matrix L, R, and O and a witness vector w and verifies.

$L\mathbf{w} \odot R\mathbf{w}=O\mathbf{w}$

Where $\odot$ is the hadamard (element-wise) product.

Use this to code to check your answer above is correct.

Let's assume:
$x_{1}=1$ (BLUE) and $x_{2}=2$ (RED) - but any two colors would work as long as they are different.

#+BEGIN_SRC sage :session . :exports both
  import numpy as np

  x1=1;x2=2;
  v1=x1*x1;v2=x2*x2;v3=x1*x2;v4=v3*v3

  # witness vector
  w =  np.array([ 1, x1, x2, v1, v2, v3, v4])

  # coefficient matrices
  L = np.matrix([[0, 1,  0,  0,  0,  0,  0 ],
                 [0, 0,  1,  0,  0,  0,  0 ],
                 [0, 1,  0,  0,  0,  0,  0 ],
                 [0, 0,  0,  0,  0,  1,  0 ],
                 [0, 1,  0,  0,  0,  0,  0 ],
                 [0, 0,  1,  0,  0,  0,  0 ],
                 [0, 0,  0,  0,  0,  1,  0 ]])

  R = np.matrix([[0, 1,  0,  0,  0,  0,  0 ],
                 [0, 0,  1,  0,  0,  0,  0 ],
                 [0, 0,  1,  0,  0,  0,  0 ],
                 [0, 0,  0,  0,  0,  1,  0 ],
                 [0, 0,  0,  1,  0,  0,  0 ],
                 [0, 0,  0,  0,  1,  0,  0 ],
                 [0, 0,  0,  0,  0,  0,  1 ]])

  O = np.matrix([[0, 0,  0,  1,  0,  0,  0 ],
                 [0, 0,  0,  0,  1,  0,  0 ],
                 [0, 0,  0,  0,  0,  1,  0 ],
                 [0, 0,  0,  0,  0,  0,  1 ],
                 [12, -20,  0,  9,  0,  0,  0 ],
                 [12, 0,  -20,  0,  9,  0,  0 ],
                 [36,  0,  0,  0,  0,  -36,  11 ]])

  result = np.matmul(O, w) == np.multiply(np.matmul(L, w) , np.matmul(R, w))

  assert result.all(), "R1CS constraints are not satisfied"
#+END_SRC

#+RESULTS:
