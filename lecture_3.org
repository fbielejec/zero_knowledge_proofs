* Notes
- homomorphism not yet covered
  - https://www.rareskills.io/post/homomorphisms
- ecdsa
- weierstrass, montgomery, edwards representations of ECs
  - affine and projective coordinates
  - behaviour of the point at infty in the affine / projective coordinates
- why do we flip in the chord and tangent law?
- enumerating ec points
  - naively
  - using curve's symmetry along the x axis
- explicit bounds for the number of points on the EC defined on a GF
#+BEGIN_SRC sage :session . :exports both
# over real numbers
ER = EllipticCurve([AA(3),AA(16)])
ER

# over F
F = GF(13)
E_F = EllipticCurve(F, [8,8])
E_F
E_F.order()
#+END_SRC

#+RESULTS:
: Elliptic Curve defined by y^2 = x^3 + 3*x + 16 over Algebraic Real Field
: Elliptic Curve defined by y^2 = x^3 + 8*x + 8 over Finite Field of size 13
: 20
* IN-PROGRESS Elliptic Curves
:PROPERTIES:
:ID:       a3efc03a-126b-4311-920e-806aad2180d1
:END:
- https://www.rareskills.io/post/elliptic-curve-addition
** DONE Elliptic Curves: General Weierstrass Form
:PROPERTIES:
:ID:       042006cc-2a76-438e-9aff-350b8ac6c762
:END:

=Definition: Elliptic Curve Weierstrass form=

An *elliptic curve* is a smooth, projective algebraic curve of genus 1, defined by a non-singular cubic equation over a field $F$, typically written in its *Weierstrass form*:

$y^2 + a_1xy + a_3y = x^3 + a_2x^2 + a_4x + a_6$

where $a_1, a_2, a_3, a_4, a_6 \in K$ , and the curve has no cusps, self-intersections, or isolated points (i.e., its *discriminant* $\Delta \neq 0$).

** DONE Elliptic Curve: Short Weierstrass Form
:PROPERTIES:
:ID:       37c60c61-c719-466a-a6a8-5677303a74ce
:END:

=Definition: Elliptic Curve Short Weierstrass form=

The *Short Weierstrass form* is the simplest and most common representation of an elliptic curve, when the characteristic of the field $F$ is neither *2 nor 3* (e.g., over $\mathbb{R}$, $\mathbb{Q}$, or $\mathbb{F}_p$ where $p > 3$).

An elliptic curve in *Short Weierstrass form* is given by:

$y^2 = x^3 + a x + b$

where:
- $a, b \in F$ are the coefficients from the field $F$
- The [[id:14c68250-d016-4ee3-89c3-6cba7e34aa13][Discriminant $\Delta$:]] $\Delta = -16(4a^3 + 27b^2) \neq 0$ (ensures smoothness, i.e., no cusps, self-intersections or isolated points).

---

*NOTE: why short?*

The [[id:042006cc-2a76-438e-9aff-350b8ac6c762][General Weierstrass Form]] includes more terms ($a_1xy, a_3y, a_2x^2, \dots$), but when $\text{char}(K) \neq 2, 3$, a linear transformation simplifies it to $y^2 = x^3 + a x + b$.

----

=Properties=

- The Short Weierstrass form is the *standard* for elliptic curves in cryptography.
- Most standardized curves (e.g. Bitcoin's secp256k1) use this form.
- It simplifies computations in cryptography (e.g., ECDSA, ECDH).

See also [[id:b16e1eda-0749-48cf-b621-59376de04f9d][Affine Short Weierstrass form]]

*** Isomorphism of the [[id:042006cc-2a76-438e-9aff-350b8ac6c762][General Weierstrass Form]] and [[id:37c60c61-c719-466a-a6a8-5677303a74ce][Short Weierstrass Form]]
:PROPERTIES:
:ID:       834c5ec9-3741-4c4d-8588-9f83d6da8cca
:END:

When the field characteristic $\text{char}(K) > 3$, the general Weierstrass form of an elliptic curve can always be transformed into the short Weierstrass form (and vice versa) via an invertible linear change of variables.
These forms are *isomorphic* over $K$ (they describe the same curve up to a coordinate transformation)

Here's how the transformations works:

If the field characteristic is not 2 or 3, then divisions by 2 and 3 in the field $K$ permits the following substitutions:

$y \mapsto \frac{y − a_{1} x − a_{3}}{2}$
which gives

$E: \quad y^2 = 4x^3 + b_{2} x^2 + 2b_{4} x + b_{6}$

and then:

$(x, y) \mapsto (\frac{x-3b_{2}}{36},\frac{y}{108})$

which (upon rescaling) gives

$E: \quad y^2 = x^3 ax +b$

** DONE Enumerating points on EC
In the exmaples we assume $E: y^2 = x^3 + 8 + 8$ defined over $F_{13}$

1. Naively, brute force

#+BEGIN_SRC sage :session . :exports both
q = 13
a = 8
b = 8

points = [[0,1]]
for x in range(q):
  for y in range(q):
    if (y*y) % q == (x^3 + a*x + b) % q:
      points.append([x,y])

points

len(points)
#+END_SRC

#+RESULTS:
#+begin_example
[[0, 1],
 [1, 2],
 [1, 11],
 [4, 0],
 [5, 2],
 [5, 11],
 [6, 5],
 [6, 8],
 [7, 2],
 [7, 11],
 [8, 5],
 [8, 8],
 [9, 4],
 [9, 9],
 [10, 3],
 [10, 10],
 [11, 6],
 [11, 7],
 [12, 5],
 [12, 8]]
20
#+end_example

Using quadratic residues. For every x from the underlying field we check if $x^3 + ax + b$ is quadratic residue mod q.
If it is we can find two points that are the solutions to:

$y^2 = x^3 + ax + b \text{ mod } q$

Points where y == 0 have only one solution (since they have no negative over the y axis).

#+BEGIN_SRC sage :session . :exports both
from sage.rings.finite_rings.integer_mod import square_root_mod_prime

q = 13
a = 8
b = 8

points = [[0,1]]
for x in range(q):
  rhs = Mod(x^3 + a*x + b,q)
  # is rhs is a quadratic residue mod q
  if rhs.is_square():
    y1 = square_root_mod_prime(rhs, q)
    y2 = q - y1
    print(f"x: {x} rhs: {rhs} lhs: [{y1},{y2}]  y1^2 = rhs: {y1^2 == rhs} and y2^2 = rhs: {y2^2 == rhs}")
    points.append([x, y1])
    if y1 != y2:
      points.append([x, y2])

points
#+END_SRC

#+RESULTS:
#+begin_example
x: 1 rhs: 4 lhs: [11,2]  y1^2 = rhs: True and y2^2 = rhs: True
x: 4 rhs: 0 lhs: [0,0]  y1^2 = rhs: True and y2^2 = rhs: True
x: 5 rhs: 4 lhs: [11,2]  y1^2 = rhs: True and y2^2 = rhs: True
x: 6 rhs: 12 lhs: [8,5]  y1^2 = rhs: True and y2^2 = rhs: True
x: 7 rhs: 4 lhs: [11,2]  y1^2 = rhs: True and y2^2 = rhs: True
x: 8 rhs: 12 lhs: [8,5]  y1^2 = rhs: True and y2^2 = rhs: True
x: 9 rhs: 3 lhs: [9,4]  y1^2 = rhs: True and y2^2 = rhs: True
x: 10 rhs: 9 lhs: [3,10]  y1^2 = rhs: True and y2^2 = rhs: True
x: 11 rhs: 10 lhs: [7,6]  y1^2 = rhs: True and y2^2 = rhs: True
x: 12 rhs: 12 lhs: [8,5]  y1^2 = rhs: True and y2^2 = rhs: True
[[0, 1],
 [1, 11],
 [1, 2],
 [4, 0],
 [5, 11],
 [5, 2],
 [6, 8],
 [6, 5],
 [7, 11],
 [7, 2],
 [8, 8],
 [8, 5],
 [9, 9],
 [9, 4],
 [10, 3],
 [10, 10],
 [11, 7],
 [11, 6],
 [12, 8],
 [12, 5]]
#+end_example

** Elliptic Curve: Discriminant $\Delta$
:PROPERTIES:
:ID:       14c68250-d016-4ee3-89c3-6cba7e34aa13
:END:

=Definition: Discriminant of an Elliptic Curve=

For a curve in [[id:37c60c61-c719-466a-a6a8-5677303a74ce][Short Weierstrass Form]] $y^2 = x^3 + a x + b$, the discriminant is:

$\Delta = -16(4a^3 + 27b^2)$

- If $\Delta \neq 0$, the curve is *smooth* (no singular points).
- If $\Delta = 0$, the curve is *singular* (has cusps, self-intersections or isolated points).

=Example: smooth curve=

$y^2=x^3 + x$

#+BEGIN_SRC sage :session . :exports both
# fails, singular curve
#a,b=0,0
#E_R = EllipticCurve([AA(a),AA(b)])

a,b=1,0
E_R
print("Discriminant:", E_R.discriminant())  # Δ ≠ 0 -> smooth
print("Is smooth?", E_R.is_smooth())       # True if Δ != 0

#plot(E_R, -2.5, 1, thickness = 1);
#show(E_R);
#+END_SRC

#+RESULTS:
: Elliptic Curve defined by y^2 = x^3 + x over Algebraic Real Field
: Discriminant: -64
: Is smooth? True

=Example: singular curve=

$y^2=x^3$

#+BEGIN_SRC maxima :results graphics file :file singular-ecc.png :exports results
programmode: false;

E1(x) := 1*sqrt(x^3);
E2(x) := -1*sqrt(x^3);
plot2d([E1,E2], [x, -5, 5], [y,-5,5], [png_file, "./singular-ecc.png"]);
#+END_SRC

#+RESULTS:
[[file:singular-ecc.png]]

*** IN-PROGRESS Deriving the discriminant
The curve's "smoothness" condition is equivalent to the *non-vanishing* of all partial derivatives of the curve’s defining equation.

Let's assume a point $P = (x_0, y_0)$ on the curve.
If both derivatives vanish at P:

$E(x_0, y_0) = \frac{\partial E}{\partial x}\bigg|_{(x_0,y_0)} = \frac{\partial E}{\partial y}\bigg|_{(x_0,y_0)} = 0 $

Then the point is singular.
If curve has no such $P$ exists it is smooth (non-singular).

For $E(x,y) = y^2 - x^3 - a x - b$ we have:

$\frac{\partial E}{\partial x} = -3x^2 - a$

$\frac{\partial E}{\partial y} = 2y$

Solving $\frac{\partial F}{\partial x} = \frac{\partial F}{\partial y} = 0$ leads to $y = 0$ and $3x^2 + a = 0$.

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([-3*x^2 - a=0, 2*y=0], [x,y]));
#+END_SRC

#+RESULTS:
:         sqrt(- a)               sqrt(- a)
: [[x = - ---------, y = 0], [x = ---------, y = 0]]
:          sqrt(3)                 sqrt(3)

Substituting into $E(x,y) = 0$ gives $x^3 + a x + b = 0$, which has a (repeated) root if $\Delta = 0$.

#+BEGIN_SRC maxima :exports both :results output replace
eq1: y^2=x^3+a*x+b;
eq2: y=0;
eq3: 3*x^2+1=0;

eq4: subst([eq2,eq3],eq1);

print(eq4);

print(solve([eq4], [x,y]));
#+END_SRC

#+RESULTS:
#+begin_example
     3
0 = x  + a x + b
                           2      3        2/3
[[x = - ((sqrt(3) sqrt(27 b  + 4 a ) - 9 b)
            1/3          2      3        1/3
 (sqrt(3) 18    sqrt(27 b  + 4 a ) + 9 18    b)
       2/3  2                   2      3        1/3       2
 - 2 18    a  (sqrt(3) sqrt(27 b  + 4 a ) - 9 b)   )/(36 a ), y = %r1],
                   2/3          2/3   2                   2      3        1/3
[x = ((2 sqrt(3) 18    %i - 2 18   ) a  (sqrt(3) sqrt(27 b  + 4 a ) - 9 b)
                     2      3        2/3
 + (sqrt(3) sqrt(27 b  + 4 a ) - 9 b)
       1/3                1/3           2      3
 ((3 18    %i + sqrt(3) 18   ) sqrt(27 b  + 4 a )
     5/2   1/3          1/3           2
 + (3    18    %i + 9 18   ) b))/(72 a ), y = %r2],
                     2/3          2/3   2                   2      3        1/3
[x = - ((2 sqrt(3) 18    %i + 2 18   ) a  (sqrt(3) sqrt(27 b  + 4 a ) - 9 b)
                     2      3        2/3
 + (sqrt(3) sqrt(27 b  + 4 a ) - 9 b)
       1/3                1/3           2      3
 ((3 18    %i - sqrt(3) 18   ) sqrt(27 b  + 4 a )
     5/2   1/3          1/3           2
 + (3    18    %i - 9 18   ) b))/(72 a ), y = %r3]]
#+end_example

Therefore singularity occurs if and only if $4a^3 + 27b^2 = 0$.

** DONE Elliptic Curve Group Law
:PROPERTIES:
:ID:       bc0f711d-4c34-4b54-b93d-00cd9acc9479
:END:
One of the key properties of an elliptic curve is that it is possible to define a [[id:4c9d3fac-53fc-40a3-9dfd-1014ffb633a2][Group]] law on the set of its points such that [[id:e7c740fb-6ec2-428b-9e47-2fa8ddd3a643][Point at infinity]] serves as the neutral element, and inverses are reflections on the x-axis.

Group law is a [[id:d17ab6af-78f3-4b78-a3ec-0f1ba7c1dbf0][Binary operator]] that takes any two points on the curve (together with the $\mathcal{O}$) and returns another point on the curve:

${\footnotesize \textcircled{+}}:  \quad E(F) \cup {\mathcal{O}} \times E(F) \cup {\mathcal{O}} \rightarrow E(F) \cup {\mathcal{O}}$

If $P$ and $Q$ are two distinct points on an elliptic curve, neither of them the point at infinity, that is:

$P,Q \in E(F) /\ \{ \mathcal{O} \}$ and $P\neq Q$.

Then the sum of $P$ and $Q$ $P {\footnotesize \textcircled{+}} Q$ follows the so called [[id:b1ac58cd-76b2-42f2-ba44-51dfb490780a][chord rule]].

Point addition exploits the fact that, over any field, a line (a degree one equation in $x$ and $y$) intersects a cubic curve (a degree three equation in $x$ and $y$) in *three places*.
This is a special case of the more general [[id:d65be3c6-88b2-4c93-9ba5-f1551ba8a8c0][Bezout's theorem]].

If $P$ is a point on an elliptic curve, which again is not the point at infinity:

$P \in E(F) /\ \{ \mathcal{O} \}$

The sum of P with itself (the doubling of P) follows the so called [[id:aa76d696-e2a2-4651-b95d-e30f47623c3b][tangent rule]].

*** DONE Point at infinity
:PROPERTIES:
:ID:       e7c740fb-6ec2-428b-9e47-2fa8ddd3a643
:END:
We define the point at infinity as the neutral element of point addition, that is, we define:

$P {\footnotesize\textcircled{+}} \mathcal{O}=\mathcal{O} {\footnotesize \textcircled{+}}P = \mathcal{O}$

For all points $P \in E(F)$.

*** DONE Point addition: Geometric Interpretation
:PROPERTIES:
:ID:       b1ac58cd-76b2-42f2-ba44-51dfb490780a
:END:
Over any field a line (a degree one equation in $x$ and $y$) intersects a cubic equation (a degree three equation in $x$ and $y$) in three places.

In other words if we run a line:

$\ell: \hspace{.5em} y = \lambda x + \upsilon$

between two points $P=(x_P, y_P)$ and $Q=(x_Q,y_Q)$ on E, then substitute this line into:

$E: \hspace{.5em} y^2=x^3+ax+b$

will give a cubic polynomial in $x$:

#+BEGIN_SRC maxima :exports both :results output replace
eq1: y^2 = x^3 + a * x + b;
eq2: y = lambda * x + v;
eq3: subst(eq2,eq1);

print(expand(eq3));

/*print(solve([eq3], [x]));*/
#+END_SRC

#+RESULTS:
:  2       2                   2    3
: x  lambda  + 2 v x lambda + v  = x  + a x + b

The roots of which are the x-coordinates of the three points of intersection between $\ell$ and $E$.

Knowing the two roots ($x_P$ and $x_Q$) allows us to determine a unique third root that corresponds to the third point in the (affine) intersection $\ell \cap E$, which we denote $\textcircled{-}R$.
This point is then flipped over the x-axis to the point $R=P {\footnotesize \textcircled{+}} Q$.
The inverse of any element $R = (x_R , y_R )$ is taken as $\textcircled{-} R = (x_{R}, - y_{R} )$

#+BEGIN_SRC maxima :results graphics file :file chord-line.png :exports results
programmode: false;
/*E(x) := if x < 0 then -1*sqrt(x^3 -2*x) else sqrt(x^3 -2*x);*/
E1(x) := 1*sqrt(x^3 -2*x);
E2(x) := -1*sqrt(x^3 -2*x);
l(x) := x;
plot2d([E1,E2, l], [x, -5, 5], [y,-5,5], [png_file, "./chord-line.png"]);
#+END_SRC

#+RESULTS:
[[file:chord-line.png]]

*** DONE Point doubling: Geometric Interpretation
:PROPERTIES:
:ID:       aa76d696-e2a2-4651-b95d-e30f47623c3b
:END:
When computing $R = P \textcircled{\\+} P$ , the line $\ell$ is computed as the tangent to E at P.
That is, the derivatives of $\ell$ and E are matched at P, so (counting multiplicities) $\ell$ intersects E twice at P.

#+BEGIN_SRC maxima :results graphics file :file tangent-line.png :exports results
programmode: false;
/*E(x) := if x < 0 then -1*sqrt(x^3 -2*x) else sqrt(x^3 -2*x);*/
E1(x) := 1*sqrt(x^3 -2*x);
E2(x) := -1*sqrt(x^3 -2*x);
l(x) := -x/2-3/2;
plot2d([E1,E2, l], [x, -5, 5], [y,-5,5], [png_file, "./tangent-line.png"]);
#+END_SRC

#+RESULTS:
[[file:tangent-line.png]]

*** DONE Chord-and-tangent group law: Explicit formulas

=Point addition: P+Q (chord rule)=

If $P = (x_1,y_1)$ and $Q = (x_2,y_2)$ such that $x_1 \neq x_2$ $R=(x_3,y_3)=P \textcircled{\\+} Q$ is defined as:

$\lambda = \frac{y_2 - y_1}{x_2 - x_1}$
$x_3=\lambda^2-x_1-x_2$
$y_3 = \lambda(x_1-x_3) - y_1$

=Point doubling: [2]P=P+P (tangent rule)=

The formula for doubling a point $P=(x,y)$ with $y\neq 0$ on $E: y^2=x^3+ax+b$ is:

$2[P]=(x_3,y_3)$

where:

$x^{'}=\lambda^2 - 2x$
$y^{'}=\lambda \cdot (x-x^{'}) - y$

For $\lambda=(\frac{3x^{2}+a}{2y})$ (the slope of the tangent line).

=Point inversion=

For $P=(x,y),\quad -P=(x,-y)$
For $\mathcal{O}$ the inverse is $\mathcal{O}$.

* TODO Elliptic Curves form an abelian group under point addition
- [ ] check all group axioms
