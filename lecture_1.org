#+STARTUP: overview
#+latex_class_options: [14pt]

* DONE Finite Fields
- Informally a *Field* is a set on which common arithmetic operations (addition and multiplication)  behave "nicely", e.g. as we wopuld expect them to behave on the real numbers, e.g.:
  - add/multiply two numbers in a set and you get a number that is also in a set
  - for addition operation there is a number that acts trivially ($a+0=a$)
  - for multiplication operation there is a number that acts trivially ($1*a=a$)
  - division by 0 is exludded
  - every element has an inverse (for addition this is $-a$, for multiplication $1/a=a^{-1}$
  - ...
- For a more formal definition see: [[file:pre_course.org::*Field][Field]].
- *Finite Field* is a Field with finitely many elements (countable finite).
- For a formal definition see: [[file:pre_course.org::*Finite field (Galois Field)][Finite field (Galois Field)]]
* DONE Addition and subtraction, additive inverses in a Finite Field
Let's assume $GF(7)= \{ 0,1,2,3,4,5,6\}$

Addition in the field: addition modulo p

#+BEGIN_SRC sage :session . :exports both
p=7
F = GF(p)

print(f"F(3) + F(6) = {F(3)+F(6)}")
print(f"(3 + 6) mod {p} = {(3+6) % p}", )
#+END_SRC

#+RESULTS:
: F(3) + F(6) = 2
: (3 + 6) mod 7 = 2

Subtraction is the addition of an *additive inverse*:

$\forall a,b \in F_{p} \quad a - b = a + (-b)$

where:
- $p$ is the field characteristic

In $F_{p}$ *Additive inverse* of $b$ is the element that when added to $b$ yields additive neutral element (that is 0):

$\forall b \in F_{p} \quad b + (-b) = (-b) + b = 0$

In a finite field of characteristic $$p the additive inverse of $b \in F_{p}$ is:

$-b = p-b$

#+BEGIN_SRC sage :session . :exports both
p = 7
F = GF(p)

additive_inverse = {}
for x in F:
  additive_inverse[x]=-x

print(f"GF({7}) elements and their additive inverse elements: {additive_inverse}")

for elem, inv in additive_inverse.items():
  print(f"{elem} + {inv} = {elem + inv}")
#+END_SRC

#+RESULTS:
: GF(7) elements and their additive inverse elements: {0: 0, 1: 6, 2: 5, 3: 4, 4: 3, 5: 2, 6: 1}
: 0 + 0 = 0
: 1 + 6 = 0
: 2 + 5 = 0
: 3 + 4 = 0
: 4 + 3 = 0
: 5 + 2 = 0
: 6 + 1 = 0

* DONE Multiplicative inverses in a Finite Field

---

*NOTE*

In the context of a Finite Field $F_{p}$ when we are talking about the *multiplicative group* $(F, \times)$ we are excluding the $0$, as it does not have an *inverse* (as similar to real numbers, division by $0$ is undefined so we cannot have $0^{-1} = 1/0$).

---

=Definition: multiplicative inverse=

Multiplicative inverse of $a \in F_{p}$ is an element $a^{-1} \in F_{p}$ s.t.:

$a \cdot a^{-1} = a^{-1} \cdot a = 1$

=Theorem: Fermat's Little Theorem=

If $p$ is a prime number then for any $a \in \mathbb{Z}$:

$a^p \equiv a \quad \text{mod } p$

If a is not an integer multiple of $p$ (which is clearly the case in a finite field, as for every $a \in F_{p} \quad gcd(a,p) = 1$) Fermat's Little Theorem is equivalent to:

$a^{p-1} \equiv 1 \quad \text{mod } p$

which we can write as:

$a \cdot a^{p-2} \equiv 1 \quad \text{mod } p$

Meaning that $a^{p-2}$ is the *multiplicative inverse* of $a$ in $F_{p}$.

#+BEGIN_SRC sage :session . :exports both
p = 7
F = GF(p)

multiplicative_inverse = {}
# excluding 0!
for x in [x for x in F][1:p]:
  multiplicative_inverse[x]=x**(p-2)

print(f"GF({7},*) elements and their multiplicative inverse elements: {multiplicative_inverse}")

for elem, inv in multiplicative_inverse.items():
  print(f"{elem} * {inv} = {elem * inv}")
#+END_SRC

#+RESULTS:
: GF(7,*) elements and their multiplicative inverse elements: {1: 1, 2: 4, 3: 5, 4: 2, 5: 3, 6: 6}
: 1 * 1 = 1
: 2 * 4 = 1
: 3 * 5 = 1
: 4 * 2 = 1
: 5 * 3 = 1
: 6 * 6 = 1

* IN-PROGRESS Quadratic residue

=Definition: Quadratic residue=

A number $y \in F_p$ given by $x*x$ is called a quadratic residue:

$x^2 = y$

Conversly $x$ is then called the *square root* of $y$ in $F_{p}$.

---

*NOTE*

- Solutions to the quadratic equation are unique in a finite field (up to a sign).
- if $y$ is given and the quadratic equation has no solution $x$ we call $y$ a *quadratic non-residue*.

---

#+BEGIN_SRC sage :session . :exports both
p = 17
F = GF(p)

#F(-5)

for x in F:
  if x * x == F(8) : print(f"{x}")

# same up to the sign
[F(-5) == F(12), F(-12) == F(5) ]
#+END_SRC

#+RESULTS:
: 5
: 12
: [True, True]

* DONE Galois lib in python

#+BEGIN_SRC jupyter-python :session zk :kernel zero_knowledge :async yes :exports both
import galois
galois.__version__
#+END_SRC

#+RESULTS:
: 0.4.6

* IN-PROGRESS Other topics
- shafi goldwasser paper (the knowledge complexity of interactive proof systems)
- fiat shamir transformation
** IN-PROGRESS Binary Exponentiation: algorithm for fast computation of large powers of integers

Binary Exponentiation, also known as square-and-multiply is a general purpose method for computing large positive integer powers of numbers.

Let's take the example of computing $a^{n}=3^{13}$.
In a naive case exponentiation takes $n-1$ steps (it's time complexity is $\mathcal{O}(N)$):

$3^{13}=\underbrace{3 \cdot 3 \cdot \ldots \cdot 3 \cdot 3}_{13 \text{ times}}$

The idea behind the binary exponentiation is that we can split the work using the binary representation (big endian, MSB to LSB) of the exponent:

$3^{13}=3^{1102_{2}}=3^{1 \cdot 2^{3}} \cdot 3^{1 \cdot 2^{2}} \cdot 3^{0 \cdot 2^{1}} \cdot 3^{1 \cdot 2^{0}}=3^8 \cdot 3^4 \cdot 3^1$

Since binary representation of $n$ has exactly $\lfloor {log_{2}(n)} \rfloor +1$ bits we can bring the time complexity down to $\mathcal{O}(log(N))$.
To be exact the number of multiplications is one less than the number of ones in the binary representation of $n$.

In our example we only need the three multiplications (since the bit with index $2$ is 0).
These, since it's consecutive squaring, we can compute quite quickly:

$3^1 = 3$
$3^2 = (3^1)^2=3^2=9$
$3^4 = (3^2)^2=9^2=81$
$3^8 = (3^4)^2=81^2=6561$

The following formula expresses the entire idea recursively:

$a^{n} = \begin{cases}
1 & \text {if } n==0 \\
(a^{\frac{n}{2}})^{2} & \text {if } n \text{ is even} \\
a \cdot (a^{\frac{n-1}{2}})^{2} & \text {if } n \text{ is even}
\end{cases}$


In each recursive call the least significant bit of $n$ is removed (with the division by $2$).

#+BEGIN_SRC rustic  :exports both
fn binary_exponentiation(a: i32, n: i32) -> i32 {
    let is_even = |x: i32| -> bool { x % 2 == 0 };

    if n == 0 {
        return 1;
    }

    if is_even(n) {
        binary_exponentiation(a * a, n / 2)
    } else {
        a * binary_exponentiation(a * a, (n - 1) / 2)
    }
}

println!("{} == {}", binary_exponentiation(3, 13), 3i32.pow(13));
#+END_SRC

#+RESULTS:
: 1594323 == 1594323

#+BEGIN_SRC jupyter-python :session zk :kernel zero_knowledge :async yes :exports both
import math

n=13
a=3

print(int(math.log2(n))+1)

print(f"{n}: {bin(n)}")

# n is odd
n = int((n-1)/2)
print(f"{n}:  {bin(n)}")
#res =

# n is even
n = int(n/2)
print(f"{n}:  {bin(n)}")

# n is odd
n = int((n-1)/2)
print(f"{n}:  {bin(n)}")

n = int((n-1)/2)
print(f"{n}:  {bin(n)}")
#+END_SRC

#+RESULTS:
: 4
: 13: 0b1101
: 6:  0b110
: 3:  0b11
: 1:  0b1
: 0:  0b0
