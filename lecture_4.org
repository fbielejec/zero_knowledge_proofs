#+STARTUP: overview
#+latex_class_options: [14pt]

* DONE Group Order
:PROPERTIES:
:ID:       97c172ec-93ae-487c-902c-32491b36a6f0
:END:

A group is called a *finite group* if the underlying set of elements is finite.
In that case, the number of elements of that group is called its order:

Let $\mathbb{G}$ be a finite group. We write $ord(\mathbb{G})$ or $|\mathbb{G}|$ for the order of $\mathbb{G}$.

See also [[id:c57bb4a8-fba2-4d46-8e8c-6438438ca1eb][Field Characteristic]]

** DONE Example: $\mathbb{Z}_{6},+$

This is the [[id:770696d2-1294-4e86-ac3c-6803f9053537][Remainder Class]] group, also called the *additive group of integers modulo 6*.

#+BEGIN_SRC sage :session . :exports both
q=6
G6 = AdditiveAbelianGroup([q])

print(f"Elements of {G6}:")
[x for x in G6]
print(f"Order of {G6}: {G6.order()}")
print(f"{G6([2])} + {G6([5])} = {G6([2]) + G6([5])}")

# same as
Z6 = Zmod(q)
elems = [x for x in Z6]
print(f"Order of {Z6} {elems}: {Z6.order()}")
#+END_SRC

#+RESULTS:
: Elements of Additive abelian group isomorphic to Z/6:
: [(0), (1), (2), (3), (4), (5)]
: Order of Additive abelian group isomorphic to Z/6: 6
: (2) + (5) = (1)
: Order of Ring of integers modulo 6 [0, 1, 2, 3, 4, 5]: 6

** DONE Example: $\mathbb{Z}_{5},*$

#+BEGIN_SRC sage :session . :exports both
q=5
#G1 = AdditiveAbelianGroup([q])

Z5 = Zmod(q)
G5 = Z5.unit_group() # multiplicative group mod 7
G5

print(f"Elements of {G5}:")
[x for x in G5]
print(f"Order of {G5}: {G5.order()}")
#+END_SRC

#+RESULTS:
: Multiplicative Abelian group isomorphic to C4
: Elements of Multiplicative Abelian group isomorphic to C4:
: [1, f, f^2, f^3]
: Order of Multiplicative Abelian group isomorphic to C4: 4

* DONE Cyclic Groups
See [[id:f5f80632-6c31-4065-9470-33d7ea93c025][Cyclic groups]]
* TODO Euler's totient function $\phi$
- Number of groups generators
* IN-PROGRESS Exponential map
:PROPERTIES:
:ID:       2a16eb2e-807a-4834-a83d-b1e15669f92f
:END:
- [ ] connection to the scalar field and scalar multiplication of EC (p82 MM)

=Definition=

When $\mathbb{G}$ is a [[id:f5f80632-6c31-4065-9470-33d7ea93c025][Cyclic group]] of [[id:97c172ec-93ae-487c-902c-32491b36a6f0][order]] $n$ and $g \in \mathbb{G}$ is a [[id:4169039c-64bf-435f-afd4-bd8b7c7a0e9b][Generator]] of $\mathbb{G}$, then there exists the so called *exponential map* which maps the group law of the additive group of integers mod $n$ $(\mathbb{Z}_n,+)$ (the [[id:770696d2-1294-4e86-ac3c-6803f9053537][Remainder Class]] group) ) onto the group law of $\mathbb{G}$ in a *one-to-one* correspondence.

$g^{(\cdot)}: \med \mathbb{Z}_{n} \rightarrow \mathbb{G}; \med x \mapsto g^{x}$

where:
- $g^{x}$ is defined as multiplying $g$ by itself $x$ times.
- $g^{0} = e_\mathbb{G}$.

In other words:

$g(x)=g^{x}= \underbrace{g \cdot g \cdot \dots \cdot g}_{x \text{ times}}$

=Properties=

1. Since  $g^{0}=e_{\mathbb{G}}$ the neutral element of $\mathbb{Z}_{n}$ is mapped to the neutral element of $\mathbb{G}$.
2. $g^{x+y}=g(x)\cdot g^{y}$.
3. From 1) and 2) above the map respects the group law.

---
*NOTE*

Since the exponential map respects the group law, we can:
- do the computation in the $\mathbb{Z}_n$ and then apply the exponential map to the result (called doing the computation "in the exponent").
- use the exponential map to map each summand into $\mathbb{G}$ first and then apply the group law of $\mathbb{Z}_n$.
- For an example see [[id:15f34c88-8220-4fb3-82bb-cd890ecd85a4][Computations in the exponent]].

---

See also [[id:3c27760c-b520-472e-a56e-4e6faf54b5eb][Logarithm map]].

*** DONE Example: exponential map $Z_{4} \mapsto Z_{5}^{*}$

#+BEGIN_SRC sage :session . :exports both
q=5
G5 = Integers(q).unit_group()
n = G5.order()
#G5.inject_variables()
g=G5.gen()

print(f"G5={[x for x in G5]} is cyclic: {G5.is_cyclic()} of order {n} and with a generator g={g}")

Z4=Integers(n)

print(f"Exponential map that maps from Z_{n}=({[x for x in Z4]},+) to Z_5=({[x for x in G5]},*):")

for k in range(n):
  print(f"exp({k}) = {g}^{k} = {g^k}")
#+END_SRC

#+RESULTS:
: G5=[1, f, f^2, f^3] is cyclic: True of order 4 and with a generator g=f
: Exponential map that maps from Z_4=([0, 1, 2, 3],+) to Z_5=([1, f, f^2, f^3],*):
: exp(0) = f^0 = 1
: exp(1) = f^1 = f
: exp(2) = f^2 = f^2
: exp(3) = f^3 = f^3

*** DONE Example: Computations in the exponent
:PROPERTIES:
:ID:       15f34c88-8220-4fb3-82bb-cd890ecd85a4
:END:

For a prerequisite definitions see [[id:2a16eb2e-807a-4834-a83d-b1e15669f92f][Exponential map]]

Let's consider the multiplicative group ($\mathbb{Z}_5, \cdot$). It is cyclic of order 4, and has two generators : 2 and 3
Let's perform a computation 1 + 3 + 2 in (one of) the exponent of the generator of $\mathbb{Z}_5^{\cdot}$: $3$.

#+BEGIN_SRC sage :session . :exports both
q=5
F5 = GF(q)
Z5 = F5.unit_group() # (Z5,*)
n = Z5.order()
g = Z5[3] # f^2 is isomorphic to 3

Z4=Integers(n) # (Z4,+)

lhs = g^(Z4(1)+Z4(2)+Z4(3))
print(f"3^(1+2+3)={lhs}")

rhs = g^Z4(1) * g^Z4(2) * g^Z4(3)
print(f"3^(1) * 3^(2) * 3^(3)={rhs}")

lhs == rhs
#+END_SRC

#+RESULTS:
: 3^(1+2+3)=f^2
: 3^(1) * 3^(2) * 3^(3)=f^2
: True

** DONE Scalar multiplication
:PROPERTIES:
:ID:       4b1d82b5-2cfd-4bd1-9c12-ab2fc7cef8ae
:END:

When $\mathbb{G}=(\mathbb{G},+)$, that is it is an [[id:191caddb-b1ac-43c9-91b5-90aff10a58b7][Additive]] [[id:f5f80632-6c31-4065-9470-33d7ea93c025][Cyclic group]] then the [[id:2a16eb2e-807a-4834-a83d-b1e15669f92f][Exponential map]] is written in the following form:

$(\cdot) \cdot g: \med \mathbb{Z}_{n} \rightarrow \mathbb{G}; \med x \mapsto x \cdot g$

where:
- $x \cdot g$ is defined as adding the generator $g$ to itself $x$ times.
- symbol $0 \cdot g$ is defined to be the neutral element in G ($e_{\mathbb{G}}$).

In the alternative notation:

$g(x)=x \cdot g= \underbrace{g + g + \dots + g}_{x \text{ times}}$

** IN-PROGRESS Logarithm map
:PROPERTIES:
:ID:       3c27760c-b520-472e-a56e-4e6faf54b5eb
:END:

=Definition=

We can define an inverse of the [[id:2a16eb2e-807a-4834-a83d-b1e15669f92f][Exponential map]] as:

$log_{g}(\cdot): \med \mathbb{G} \rightarrow Z_{n}; \med x \mapsto log_{g}(x)$

It is called *base $g$ discrete logarithm map*.

---

*NOTE*

Discrete logarithms are of high importance in cryptography, because there are finite cyclic groups (like [[id:042006cc-2a76-438e-9aff-350b8ac6c762][Elliptic Curves]]) where the exponential map is believed to be a one-way function, which (informally) means that computing the exponential map is fast, while computing the logarithm map is slow (it's a trapdoor).

---

*** DONE Example: base g discrete logarithm map

Let's consider the following logarithm map:

$log_3(\cdot): \mathbb{Z}_{5}^{*} \rightarrow \mathbb{Z}_{4}; \med x \mapsto log_3(x)$

Suppose we want to compute $log_3{4}$.
That means we need to find an $x$ s.t $3^x=4$, and all we can do is a brute-force method of inserting elements $x$ from \mathbb{Z}_{4} into the exponent of $g=3$ until the result is $4$:

#+BEGIN_SRC sage :session . :exports both
q = 5
Z5 = Zmod(q).unit_group()
g = Z5[3] # f^2 is isomorphic to 3
n=Z5.order()

y=Z5[2] # this is 4

Z4=Zmod(n)

for x in Z4:
  if g^x == y:
    print(f"log_3({y}) = {x}")
#+END_SRC

#+RESULTS:
: log_3(f^2) = 2

** TODO Exponential map for Elliptic Curves
:PROPERTIES:
:ID:       77d52c07-a41e-42c5-8069-2be5eaf576b2
:END:
- p40 MM
*** IN-PROGRESS Example: Exponential map for bn128

#+BEGIN_SRC sage :session . :exports both
F = GF(21888242871839275222246405745257275088696311157297823662689037894645226208583)
E = EllipticCurve(F,[0,3])

G = E(1,2)

P2 = G+G
P2

P3 = P2+G

3*G == P3

5*G == G+G+G+G+G

min_G = G * ( E.order() - 1)
min_G == -1*G

# x - y = 3
# e.g. x = 7 y = 4

F.order()
E.order()

# 1/2G + 1/2G
#+END_SRC

* IN-PROGRESS [#A] NOTES
- map numbers (labels) with points in the group
- homomorphism

#+BEGIN_SRC sage :session . :exports both
  F = GF(21888242871839275222246405745257275088696311157297823662689037894645226208583)
  E = EllipticCurve(F,[0,3])

  G = E(1,2)

  P2 = G+G
  P2

  P3 = P2+G

  3*G == P3

  5*G == G+G+G+G+G

  min_G = G * ( E.order() - 1)
  min_G == -1*G

  # x - y = 3
  # e.g. x = 7 y = 4

  F.order()
  E.order()

  # 1/2G + 1/2G
#+END_SRC

#+RESULTS:
: (1368015179489954701390400359078579693043519447331113978918064868415326638035 : 9918110051302171585080402603319702774565515993150576347155970296011118125764 : 1)
: True
: True
: True
: 21888242871839275222246405745257275088696311157297823662689037894645226208583
: 21888242871839275222246405745257275088548364400416034343698204186575808495617
