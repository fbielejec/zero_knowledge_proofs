* DONE ECDSA from scratch
- https://almondine-song-c43.notion.site/Homework-4-ec8534279e2045479353509d5c3c73a1

Implement ECDSA from scratch.
You want to use the secp256k1 curve (which specifies the values for the curve). When starting off, use the Elliptic curve multiplication library used in the blog post linked here: https://www.rareskills.io/post/generate-ethereum-address-from-private-key-python

1) pick a private key.
2) generate the public key using that private key (not the eth address, the public key).
3) pick message m and hash it to produce h (h can be though of as a 256 bit number).
4) sign m using your private key and a randomly chosen nonce k. produce (r, s, h, PubKey).
5) verify (r, s, h, PubKey) is valid.

You may use a library for point multiplication, but everything else you must do from scratch.
Remember, when you compute the multiplicative inverse, you need to do it with respect to the curve order.

Pay close attention to the distinction between the curve order and the prime number $p$ we compute the modulus of $y^2=x^3+b \pmod p$.

** ECDSA Parameters
- $q$: a prime number.
- $\mathbb{F}_q$: a [[id:d90a640f-3419-4b13-a272-919d6e03dd57][Finite Field]] with [[id:c57bb4a8-fba2-4d46-8e8c-6438438ca1eb][characteristic]] $q$.
- $E(\mathbb{F}_q)$: an [[id:a3efc03a-126b-4311-920e-806aad2180d1][Elliptic Curve]] defined over the finite field $\mathbb{F}_q$ (a cyclic group).
- $G \in E(\mathbb{F}_{q})$, [[id:4169039c-64bf-435f-afd4-bd8b7c7a0e9b][generator]] of a large subgroup of #E(\mathbb{F}_{q}# with a prime order $n$.
  - *note*: not neccessarily the generator of $E(\mathbb{F}_q)$, this would happen only when $ord(G)=\#E(\mathbb{F}_q)$ (the order of G equals the number of points on the curve $E(\mathbb{F}_q)$, aka it's order).
- $n$ the order of $G$, that is the smallest integer s.t. $[n]G=\mathcal{O}$.
- $d$: a private key randomly selected in the interval $[1,n-1]$ (a scalar).
- $Q$: a public key, s.t. $Q=[d]G$.
- $m$: a secret message.

** DONE sign the message
1. Prover calculates $h = HASH(m)$, with the result converted to an integer.
   - Hashing should return $n$ most significant bits as the output. This can result in an integer *greater* then $n$ but not longer (in bit length)!
2. Prover picks a random scalar $k$ from $[1,n-1]$.
3. Prover computes $R=[k]G$ and takes the x-coordinate of the resulting point: $r$.
4. Prover computes $s = (h + r \cdot d) \cdot k^{-1}$. If $s$ is 0 return to step 2).
5. Prover returns the signature $(r,s)$ and sends $(r,s,h,Q)$ to the verifier.
6. NOTE: All computations are done $\text{mod } n$ (in the scalar field of order $n$).

** DONE verify the signature
1. Verifier checks that $Q$ is not equal to $\mathcal{O}$,
2. Verifier checks that $Q$ lies on the curve $E(\mathbb{F}_q)$
3. Verifier checks that $r$ and $s$ are integers in $[1,n-1]$.
4. Verifier calculates $e=HASH(m)$, using the same hash function as the prover.
5. Verifier computes $R^{'}=([h]G+[r]P) \cdot s^{-1}$
6. Signature verifies if the $x$ coordinate of $R^{'}$ is congruent to $r$ $\text{ mod } n$

** DONE Implementation
#+BEGIN_SRC sage :session . :exports both
import hashlib

def generate_keypair(G,n):
  d = randint(1, n-1);
  Q = d*G;
  return (Q,d)

def hash(m,n):
  hasher = hashlib.sha256(m.encode('utf-8'))
  digest = hasher.hexdigest()
  z = ZZ(digest, 16)
  z_bin = z.digits(base=2, padto=256)
  # take the n leftmost (BigEndian == most significant) bits
  x = 0
  for i in range(n.bit_length()):
    x += z_bin[i]*2^i
  return x

def sign(m, Fn, PrivKey):
  n=Fn.order()
  h=hash(m,n)
  s = 0
  while s == 0:
    # NOTE: in a real implementation k should *not* be reused for different signatures (could leak private key)
    k=randint(1, n-1)
    R=k*G
    r=Fn(R[0])
    s=Fn(h + r*PrivKey) * Fn(k)^-1
  return (r,s)

def verify(m, r, s, Fn, PubKey, E):
  n=Fn.order()
  # publicKey is not the identity element
  assert(PubKey != E(0))
  # publicKey belongs to the EC
  assert(PubKey == E.point(PubKey))
  # publicKey is of order n
  assert(E(0) == n*PubKey)

  #  r and s belong to the scalar field
  assert(r == mod(r,n))
  assert(s == mod(s,n))

  # compute the message hash
  e=hash(m,n)
  # assert that the hash bit length is not longer than the scalar field order's bit length
  assert(e.bit_length() <= n.bit_length())

  # retrieve R as (e*G + r*PubKey) * s^-1
  #u1=Fn(e) * Fn(s)^-1
  #u2=Fn(r) * Fn(s)^-1
  R_prime=(Fn(e) * G + Fn(r)*PubKey)*Fn(s)^-1  #u1*G+u2*PubKey
  x1=R_prime[0]
  # the signature is valid if r = x1 mod n
  return (Fn(x1) == r)

# tiny jub-jub
q=13
Fq = GF(q)
a=8;b=8
E = EllipticCurve(Fq, [a,b])
E

# choose the G that generates the biggest prime order subgroup (for TJJ_13 this is 5)
(G,n) = max([x for x in filter(lambda x: is_prime(x[1]), [(P, P.order()) for P in E])], key=lambda x: x[1])

# define the scalar field for the EC point multiplication
Fn=GF(n)

(PubKey,PrivKey) = generate_keypair(G,n)

m='1110010000'
(r,s)=signature=sign(m, Fn, PrivKey)
verifies=verify(m,r,s,Fn,PubKey, E)

print(f"message: {m}, message signature: {signature}, signature verifies: {verifies}")

m_prime='1110010001'
(r,s)=signature=sign(m_prime, Fn, PrivKey)
verifies=verify(m,r,s,Fn,PubKey,E)

print(f"message: {m}, signed message: {m_prime}, message signature: {signature}, signature verifies: {verifies}")

print()

# bn128
q=21888242871839275222246405745257275088696311157297823662689037894645226208583
Fq=GF(q)
a=0;b=3
E = EllipticCurve(Fq, [a,b])
E
n=E.order()
assert(n.is_prime())
G=E.gen(0)
assert(n*G==E(0))

Fn=GF(n)

(PubKey,PrivKey) = generate_keypair(G,n)

message="iliketrains"
(r,s)=signature=sign(m, Fn, PrivKey)
verifies=verify(m,r,s,Fn,PubKey, E)

print(f"message: {m}, message signature: {signature}, signature verifies: {verifies}")


#+END_SRC

#+RESULTS:
: Elliptic Curve defined by y^2 = x^3 + 8*x + 8 over Finite Field of size 13
: message: 1110010000, message signature: (2, 4), signature verifies: True
: message: 1110010000, signed message: 1110010001, message signature: (3, 4), signature verifies: True
: 
: Elliptic Curve defined by y^2 = x^3 + 3 over Finite Field of size 21888242871839275222246405745257275088696311157297823662689037894645226208583
: message: 1110010000, message signature: (13669078870688833915010211124190440075943899116954119699792527459512133764117, 6860784283580375570156134585338624316074256604198483031707556790975050664519), signature verifies: True
