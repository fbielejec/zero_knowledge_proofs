* IN-PROGRESS Pre-Course
- https://leather-bulb-be5.notion.site/ZKP-Pre-Course-Self-Learn-Material-V2-31b9618231cd424fa72bdc5f11221bea
** IN-PROGRESS Linear algebra
- [X] vectors: https://www.youtube.com/watch?v=fNk_zzaMoSs

---

*NOTE: summary*

- geometric interpretation of vector addition and scalar multiplication

---


#+BEGIN_SRC jupyter-python :session zk :async yes
  import numpy as np

  # Define vectors
  a = np.array([3, -5])
  b = np.array([2,1])

  # Add vectors
  result = a + b  # Element-wise addition
  print(f"{a}+{b}={result}")

  # multiply vector by a scalar
  scalar = 2
  print(f"{scalar}*{result}={scalar*result}")
#+END_SRC

#+RESULTS:
: [ 3 -5]+[2 1]=[ 5 -4]
: 2*[ 5 -4]=[10 -8]

- [ ] https://www.youtube.com/watch?v=k7RM-ot2NWY

---

*NOTE: summary*

- coordinates: two dimensional vectors
- coordinates can be thought of as pairs of scalars that scale $\hat{i}$ and $\hat{j}$ (the *basis* of the coordinate system).
- in xy coordinate system $\hat{i}$ is a special vector that points to the right with a length of 1 (unit vector in the x direction)
- $\hat{j}$ is a special vector that points up with a length 1 (unit vector in the y direction)
- x coordinates scales $\hat{i}$ and y coordinates scales $\hat{j}$.
- the vector that these coordinates describe is then the sum of the two scaled vectors $\hat{i}$ and $\hat{j}$:
  - e.g. $[3,-2] = (3) \cdot \hat{i} + (-2)\cdot \hat{j}$
- you can in fact arbitrarily choose any two different vectors as the basis and you get an entirely different coordinate system
- any time you scale and add two vectors like this it's called a *linear combination* of those two vectors:

=Definition: linear combination of vectors=

$a \cdot \vec{v} + b\cdot \vec{w}$

where:
- $a,b$ are scalars

=Definition: linearly dependent vectors=

One of the vectors can be expresses as a linear combination of the others:

$\vec{u} = a \cdot \vec{v} + b\cdot \vec{w}$

where:
- $a,b$ are some scalars (fixed values)

=Definition: linearly independent vectors=

One of the vectors cannot be expresses as a linear combination of the other(s):

$\forall a\in \mathbb{R} \hspace{1em} \vec{v} \neq a \cdot \vec{v}$
where:
 - the example is for 2 vectors but the same definition holds for 3 (or more) vectors.

- the *span* of two vectors is the set of all possible linear combinations of those vectors.
- 1 vector can describe all of 1d space (multiplied by a scalar can eventually span the whole space)
- adding a linearly independent vector to that one one unlocks another dimension
  - adding a linearly dependent one adds nothing new (no new dimension)
---

=Example: basis of the coordinaet system=

#+BEGIN_SRC jupyter-python :session zk :async yes
  import numpy as np
  import random

  np.random.seed(2137)

  # Define vectors
  i_hat = np.array([1,0])
  j_hat = np.array([0,1])

  v = np.array([3,-2])

  print(f"{v} = {v[0] * i_hat + v[1] * j_hat}")
#+END_SRC

#+RESULTS:
: [ 3 -2] = [ 3 -2]

=Example: span is a set of all linear combinations of a vector=

#+BEGIN_SRC jupyter-python :session zk :async yes
  import numpy as np
  import random

  np.random.seed(2137)

def span(i, j):
    combinations = set()
    while len(combinations) < 10:
        a = random.randint(-10,10)
        b = random.randint(-10,10)
        combination = a*i + b *j
        combinations.add(tuple(combination))
    return combinations

# these two vectors are linearly dependent (they are a linear combination of one another)
i = np.array([1,0]) 
j = 2 * i
# notice how only one coordinate varies (only 1 dimension)
print(f"span of i={i} and j={j}: {span(i,j)}")

# these two vectors are linearly independent
i = np.array([1,0]) 
j = np.array([0,1]) 
# notice how both coordinates vary (we gain 1 dimension)
print(f"span of i={i} and j={j}: {span(i,j)}")
#+END_SRC

#+RESULTS:
: span of i=[1 0] and j=[2 0]: {(-8, 0), (4, 0), (-12, 0), (-17, 0), (-27, 0), (7, 0), (13, 0), (10, 0), (6, 0), (1, 0)}
: span of i=[1 0] and j=[0 1]: {(-9, -9), (4, 1), (2, -3), (1, 1), (3, 10), (-6, -3), (2, 9), (1, -3), (-8, -2), (-10, 8)}
