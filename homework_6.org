* DONE Hw 6
https://almondine-song-c43.notion.site/Homework-6-8592a0f62a904fed996144d0e4f95e62

We are asked to verify the following computation in zero knowledge:

$a \cdot b = \alpha \cdot \beta + (x_1 + x_2 + x_3) \cdot \gamma + c \cdot \delta$

where the verifier knows only $x_1$, $x_2$ and $x_3$ and all the other values learns are hidden "in the exponent".

The prover computes:

- $A_1=[a] \mathbb{G}_{1}$
- $B_2=[b] \mathbb{G}_{2}$
- $\bar{\mathrm{A}}_{1}= [\alpha] \mathbb{G}_{1}$
- $\bar{\mathrm{B}}_2= [\beta] \mathbb{G}_{2}$
- $\Gamma_2= [\gamma] \mathbb{G}_{2}$
- $C_1= [c] \mathbb{G}_{1}$
- $\Delta_2= [\delta] \mathbb{G}_{2}$

where:

- $[\cdot]$ denotes elliptic curve point scalar multiplication
- $\mathbb{G}_1,\mathbb{G}_2$ are the generators of the $E(\mathbb{F}_p)$ and $E(\mathbb{F}_p^2)$ respectively
- he/she immediately forgets $\alpha,\beta,\gamma,\delta$ (toxic waste)


Verifier then checks if:

$e(A_{1},B_{1}) \times e(\bar{\mathrm{A}}_{1},\bar{\mathrm{B}}_{2}) \times e([x_1+x_2+x_3]\mathbb{G}_1, \Gamma_2) \times e(C_1,\Delta_2) == g^{0}$

where:
- $e: \med \langle \mathbb{G}_1 \rangle \times \langle \mathbb{G}_2 \rangle \rightarrow \mathbb{F}_{p^{12}}$ is the Ate pairing (a billinear map)
- $g^{0}$ is the neutral element in the multiplicative group of $\mathbb{F}_{p^{12}}$

** Sage POC
#+latex: {\scriptsize
#+BEGIN_SRC sage  :session . :exports both
import py_ecc.bn128 as bn128
from py_ecc.fields import (
    bn128_FQ12 as FQ12
)

p=21888242871839275222246405745257275088696311157297823662689037894645226208583
Fp=GF(p)
E = EllipticCurve(Fp, [0,3])
G1 = E(1,2)

# embedding degree
k=2

Fp2 = GF(p^k, name='i', modulus=x^k + 1)

a=0
TwistB=3*Fp2([9,1])^(-1) # 3/(i+9)
E2 = EllipticCurve(Fp2, [a,TwistB])

# [a0,a1] -> a0 + i*a1
x_G2 = Fp2([
  10857046999023057135944570762232829481370756359578518086990519993285655852781,
  11559732032986387107991004021392285783925812861821192530917403151452391805634
])

y_G2 = Fp2([
  8495653923123431417604973247489272438418190587263600148770280649306958101930,
  4082367875863433681332203403145435568316851327593401208105741076214120093531
])

G2 = E2(x_G2, y_G2)

def pairing(P,Q):
  ePQ = bn128.pairing( (bn128.FQ2([int(Q[0][0]), int(Q[0][1])]),
                        bn128.FQ2([int(Q[1][0]), int(Q[1][1])])),
                       (bn128.FQ(int(P[0])), bn128.FQ(int(P[1]))) );
  # returns an element in FQ12 (extension tower Fp^2 -> Fp^6 -> Fp12)
  return ePQ

#g=pairing(G1,G2)
#g

a1=10
b2=11
alpha1=5
beta2=6
x1=1;x2=2;x3=3
gamma2=4
c1=7
delta2=8

A1=-a1*G1
B2=b2*G2
Alpha1=alpha1*G1
Beta2=beta2*G2
Gamma2=gamma2*G2
C1=c1*G1
Delta2=delta2*G2

print(f"A1: {A1}")
print(f"B2: {B2}")
print(f"Alpha1: {Alpha1}")
print(f"Beta2: {Beta2}")
print(f"Gamma2: {Gamma2}")
print(f"C1: {C1}")
print(f"Delta2: {Delta2}")

assert(-Fp(a1) * Fp(b2) + Fp(alpha1)*Fp(beta2) + \
        Fp(x1+x2+x3) * Fp(gamma2) + Fp(c1) * Fp(delta2) == Fp(0))

pairing(A1,B2) * pairing(Alpha1,Beta2) * pairing((x1+x2+x3)*G1,Gamma2) * pairing(C1,Delta2) == FQ12.one()
#+END_SRC

#+RESULTS:
: A1: (4444740815889402603535294170722302758225367627362056425101568584910268024244 : 11350979775309792057627585728092606167309854128733159954336302813744955667163 : 1)
: B2: (15624790064206502667756020446826209080711344272800176518784649088946231692936*i + 8472151341754925747860535367990505955708751825377817860727104273184244800723 : 19488077321171448217727198730828487286865984357780136663388739985720647978898*i + 1196137947243150610106053819405501111182787323156221967342356892090037828244 : 1)
: Alpha1: (10744596414106452074759370245733544594153395043370666422502510773307029471145 : 848677436511517736191562425154572367705380862894644942948681172815252343932 : 1)
: Beta2: (12345624066896925082600651626583520268054356403303305150512393106955803260718*i + 10191129150170504690859455063377241352678147020731325090942140630855943625622 : 13790151551682513054696583104432356791070435696840691503641536676885931241944*i + 16727484375212017249697795760885267597317766655549468217180521378213906474374 : 1)
: Gamma2: (18556147586753789634670778212244811446448229326945855846642767021074501673839*i + 18936818173480011669507163011118288089468827259971823710084038754632518263340 : 13775476761357503446238925910346030822904460488609979964814810757616608848118*i + 18825831177813899069786213865729385895767511805925522466244528695074736584695 : 1)
: C1: (10415861484417082502655338383609494480414113902179649885744799961447382638712 : 10196215078179488638353184030336251401353352596818396260819493263908881608606 : 1)
: Delta2: (1513450333913810775282357068930057790874607011341873340507105465411024430745*i + 11166086885672626473267565287145132336823242144708474818695443831501089511977 : 20245151454212206884108313452940569906396451322269011731680309881579291004202*i + 10576778712883087908382530888778326306865681986179249638025895353796469496812 : 1)
: True

#+latex: }
