* IN-PROGRESS Hw 6
- https://almondine-song-c43.notion.site/Homework-6-8592a0f62a904fed996144d0e4f95e62

We are asked to verify the following computation in zero knowledge:

$a \cdot b = \alpha \cdot \beta + (x_1 + x_2 + x_3) \cdot \gamma + c \cdot \delta$

where the verifier knows only $x_1$, $x_2$ and $x_3$.

The prover computes:

$A_1=[a] \mathbb{G}_{1}$
$B_2=[b] \mathbb{G}_{2}$
$\bar{\mathrm{A}}_{1}= [\alpha] \mathbb{G}_{1}$
$\bar{\mathrm{B}}_2= [\beta] \mathbb{G}_{2}$
$\Gamma_2= [\gamma] \mathbb{G}_{2}$
$C_1= [c] \mathbb{G}_{1}$
$\Delta_2= [\delta] \mathbb{G}_{2}$

where:
- $[\cdot]$ denotes elliptic curve point scalar multiplications
- $\mathbb{G}_1,\mathbb{G}_2$ are the generators of the $E(\mathbb{F}_p)$ and $E(\mathbb{F}_p^2)$ respectively

Verifier then checks if:

$e(A_{1},B_{1}) \times e(\bar{\mathrm{A}}_{1},\bar{\mathrm{B}}_{2}) \times e([x_1+x_2+x_3]\mathbb{G}_1, \Gamma_2) \times e(C_1,\Delta_2) == g^{0}$

where:
- $e: \med \langle \mathbb{G}_1 \rangle \times \langle \mathbb{G}_2 \rangle \rightarrow \mathbb{F}_{p^{12}}$ is the Ate pairing (a billinear map)
- $g^{0}$ is the neutral element in the multiplicative group of $\mathbb{F}_{p^{12}}$

Sage implementation below:

#+BEGIN_SRC sage  :session . :exports both
import py_ecc.bn128 as bn128
from py_ecc.fields import (
    bn128_FQ12 as FQ12
)

p=21888242871839275222246405745257275088696311157297823662689037894645226208583
Fp=GF(p)
E = EllipticCurve(Fp, [0,3])
G1 = E(1,2)

# embedding degree
k=2

Fp2 = GF(p^k, name='i', modulus=x^k + 1)

a=0
TwistB=3*Fp2([9,1])^(-1) # 3/(i+9)
E2 = EllipticCurve(Fp2, [a,TwistB])

# [a,b] -> a + i*b
x_G2 = Fp2([
  10857046999023057135944570762232829481370756359578518086990519993285655852781,
  11559732032986387107991004021392285783925812861821192530917403151452391805634
])

y_G2 = Fp2([
  8495653923123431417604973247489272438418190587263600148770280649306958101930,
  4082367875863433681332203403145435568316851327593401208105741076214120093531
])

G2 = E2(x_G2, y_G2)

def pairing(P,Q):
  ePQ = bn128.pairing( (bn128.FQ2([int(Q[0][0]), int(Q[0][1])]),
                        bn128.FQ2([int(Q[1][0]), int(Q[1][1])])),
                       (bn128.FQ(int(P[0])), bn128.FQ(int(P[1]))) );
  # returns an element in FQ12 (extension tower Fp^2 -> Fp^6 -> Fp12)
  return ePQ

#g=pairing(G1,G2)
#g

a1=10
b2=11
alpha1=5
beta2=6
x1=1;x2=2;x3=3
gamma2=4
c1=7
delta2=8

A1=-a1*G1
B2=b2*G2
Alpha1=alpha1*G1
Beta2=beta2*G2
Gamma2=gamma2*G2
C1=c1*G1
Delta2=delta2*G2

assert(-Fp(a1) * Fp(b2) + Fp(alpha1)*Fp(beta2) + Fp(x1+x2+x3)*Fp(gamma2) + Fp(c1)*Fp(delta2) == Fp(0))

pairing(A1,B2) * pairing(Alpha1,Beta2) * pairing((x1+x2+x3)*G1,Gamma2)*pairing(C1,Delta2) == FQ12.one()
#+END_SRC

#+RESULTS:
: True
