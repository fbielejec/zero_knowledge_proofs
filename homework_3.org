* DONE Implementing Elliptic Curve Point Addition (affine coordinates)
#+BEGIN_SRC sage :session . :exports both

# TODO handle P + (-P) (and -P + P)
def add(P1,P2):
  # P + infty = P
  if ((P2[0] == 0) and (P2[1] == 1)):
    return P1

  # infty + P = P
  if ((P1[0] == 0) and (P1[1] == 1)) :
    return P2

  x1 = P1[0]; x2 = P2[0]; y1 = P1[1]; y2 = P2[1];
  lbda = (y2-y1) / (x2-x1);
  x3 = lbda^2 - x1 - x2;

  return (x3, lbda*(x1 - x3) - y1)

def double(P,a):
  # doubling a point at infty = infty
  if ((P[0] == 0) and (P[1] == 1)):
    return (0, 1);

  # doubling a point of order 2 (tangent is vertical)
  if P[1] == 0:
    return (0, 1);

  x = P[0]; y = P[1];
  lbda = (3*x^2 + a) / (2*y);
  x3 = lbda^2 - 2*x;

  return (x3,lbda*(x-x3) - y);

a=0;b=9

E = EllipticCurve([AA(a),AA(b)])
E

P=E(3,6)
Q=E(6,15)
O=E(0)

print(f"{P} + {O} = {add(P,O)}")

print(f"[2]{O} = {double(O,a)}")

print(f"{P} + {Q} = {add(P,Q)}")
assert(P+Q == E(add(P,Q)))

print(f"[2]{P} = {double(P,a)}")
assert(2*P == E(double(P,a)))
#+END_SRC

#+RESULTS:
: Elliptic Curve defined by y^2 = x^3 + 9 over Algebraic Real Field
: (3 : 6 : 1) + (0 : 1 : 0) = (3 : 6 : 1)
: [2](0 : 1 : 0) = (0, 1)
: (3 : 6 : 1) + (6 : 15 : 1) = (0, 3)
: [2](3 : 6 : 1) = (-15/16, 183/64)
