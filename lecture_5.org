#+STARTUP: overview
#+latex_class_options: [14pt]

* NOTES
- homomorphic encryption
- EC operations in Solidity
- solidity precompiles
- extension fields
 - order and characteristic of the extension fields are different!
* IN-PROGRESS Homomorphic encryption [0/2]
:PROPERTIES:
:ID:       43067f10-f7d9-463d-833e-894da69af237
:END:
Alice (the prover) knows a and b such that their sum is 12.
To prove it she sends corresponding points on EC $aG$, $bG$ to Bob (the verifier) s.t.

[a]G + [b]G = [a+b]G

Bob verifies that [a]G + [b]G = [12]G

- [ ] This can be generalized to a set of equations
- [ ] We can only do this for addition (not multiplication - point multiplication is not defined for EC points)
  - fully homomorphic encryption
  - pairings
* IN-PROGRESS Elliptic Curve operations in Solidity
- uses bn128 curve
- eccAdd(address 6)
- eccMul(address 7)
- eccPairing(address 8)
* IN-PROGRESS Extension fields
** IN-PROGRESS Example: extending $\mathbb{F}_{3}$ to $\mathbb{F}_{3^2}$ ($m = 2$)

#+BEGIN_SRC sage :session . :exports both
p=3
F3=GF(p)

# ring of polynomials in F5
R_F3=PolynomialRing(F3, 'i')
R_F3

m = 2

# finding a polynomial irreducible in R of degree m = 2
P = R_F3.random_element();
while (not (P.is_irreducible() and (P.degree() == m))):
  P = R_F3.random_element();

print(f"{P} is irreducible: {P.is_irreducible()} and has a degree: {P.degree()}")

# define the extension field.
# x is the root of the irreducible polynomial
F3_2=GF(p^m, name = 'x', modulus=P)

# this is p^m
print(f"{F3_2} (order = {(F3_2.order())}, characteristic = {F3_2.characteristic()})")

# entire extended field (p^m points)
elems = [p for p in F3_2]
elems.sort()
elems
#+END_SRC

#+RESULTS:
: Univariate Polynomial Ring in i over Finite Field of size 3
: i^2 + 1 is irreducible: True and has a degree: 2
: Finite Field in x of size 3^2 (order = 9, characteristic = 3)
: [0, 1, 2, x, x + 1, x + 2, 2*x, 2*x + 1, 2*x + 2]

Same construction but "by hand":

#+BEGIN_SRC sage :session . :exports both
p=3
F3=GF(p)

# ring of polynomials in F5
F3i.<i> = PolynomialRing(F3) #F3[]

# because ring object is infinite
#ring = set()
#while not (len(ring) == 27):
#  ring.add(F3i.random_element())

ring = {F3i(0), F3i(1), F3i(i), F3i(i**2), F3i(i**3), F3i(i**4)}
r = [p for p in ring]

print(f"some elements of the polynomial ring in F3:")
r
print()

P = F3i(i**2 + 1)
print(f"{P} is irreducible: {P.is_irreducible()}")
print()

p=F3i(i^3+1)

print(f"{p} mod {P} = {p.mod(P)}")
print()

F_ext = set([p.mod(P) for p in ring])
print(f"Taking the elements in the ring modulo the irreducible polynomial {P} we get the set {F_ext} ({len(F_ext)} elements)")
#+END_SRC

#+RESULTS:
: some elements of the polynomial ring in F3:
: [0, 1, i^4, i, i^3, i^2]
: 
: i^2 + 1 is irreducible: True
: 
: i^3 + 1 mod i^2 + 1 = 2*i + 1
: 
: Taking the elements in the ring modulo the irreducible polynomial i^2 + 1 we get the set {0, 1, 2, i, 2*i} (5 elements)
